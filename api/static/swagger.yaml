openapi: 3.0.0
info:
  description: ''
  version: 0.0.1
  title: S&P Internal API
  contact: {}
paths:

  /auth/register:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Register a new user
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterPostBody'
      responses:
        '201':
          description: OK - User registered | Registration mail sent
        '206':
          description: OK - User registered | Registration mail not sent
        '400':
          description: KO - Missing information in request
        '401':
          description: KO - Bad information in request
  /auth/confirm/{token}:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Conirm a new user
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterPostBody'
      responses:
        '201':
          description: OK - User confirmed
        '498':
          description: KO - Token expired
  /auth/login:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Returns access_token & refresh_token
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginPostBody'
      responses:
        '200':
          description: OK - User logged in
        '400':
          description: KO - Missing information in request
        '401':
          description: KO - Bad information in request
  /auth/refresh:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Returns new access_token from refresh_token
      security:
        - refresh_token: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRefreshResponse'
  /auth/infos:
    get:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Get informations from an authenticated user
      security:
        - access_token: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthInfosResponse'
        '401':
          description: KO - Expired/Missing token
        '422':
          description: KO - Wrong token
  /auth/delete/{username}:
    delete:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Permanently delete a PJ from DB
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK - User deleted
        '400':
          description: KO - Missing information in request
        '404':
          description: KO - User not found
        '422':
          description: KO - Wrong token

  /pj/create:
    post:
      tags:
        - '/pj: PJ Requests'
      summary: Create a PJ for a registered user
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PjCreatePostBody'
      security:
        - access_token: []
      responses:
        '201':
          description: OK - PJ created
        '400':
          description: KO - Missing information in request
        '409':
          description: KO - PJ already exists
        '422':
          description: KO - Oops
  /pj/infos/list:
    get:
      tags:
        - '/pj: PJ Requests'
      summary: Get PJ associated to a registered user
      security:
        - access_token: []
      responses:
        '200':
          description: OK
        '404':
          description: KO - PJ not found
        '422':
          description: KO - Oops
  /pj/infos/id/{id}:
    get:
      tags:
        - '/pj: PJ Requests'
      summary: Get PJ public informations
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: KO - PJ not found
        '422':
          description: KO - Oops
  /pj/infos/name/{name}:
    get:
      tags:
        - '/pj: PJ Requests'
      summary: Get PJ public informations
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: KO - PJ not found
        '422':
          description: KO - Oops
  /pj/delete/id/{id}:
    delete:
      tags:
        - '/pj: PJ Requests'
      summary: Delete a PJ for a registered user
      security:
        - access_token: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK - PJ deleted
        '404':
          description: KO - PJ not found / not belong to token user
        '422':
          description: KO - Oops

  /mp/send:
    post:
      tags:
        - '/mp: MP Requests'
      summary: Send a MP from a PJ to a list of PJs
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpSendPostBody'
      security:
        - access_token: []
      responses:
        '201':
          description: OK - MP sent
        '409':
          description: KO - Token/username mismatch
        '422':
          description: KO - Oops
  /mp/{pjid}/list:
    get:
      tags:
        - '/mp: MP Requests'
      summary: Get MP list for a PJ
      parameters:
        - in: path
          name: pjid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: KO - PJ not found
        '409':
          description: KO - No MP found for this PJ
  /mp/{pjid}/{mpid}:
    get:
      tags:
        - '/mp: MP Requests'
      summary: Get full MP
      parameters:
        - in: path
          name: pjid
          schema:
            type: integer
          required: true
        - in: path
          name: mpid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: KO - PJ not found
        '409':
          description: KO - No MP found for this PJ
    delete:
      tags:
        - '/mp: MP Requests'
      summary: Delete a MP from a PJ
      parameters:
        - in: path
          name: pjid
          schema:
            type: integer
          required: true
        - in: path
          name: mpid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK - MP deleted
        '409':
          description: KO - Token/username mismatch
        '422':
          description: KO - Oops

components:
  schemas:
    AuthRegisterPostBody:
      type: object
      properties:
        username:
          type: string
          format: string
        password:
          type: string
          format: password
        mail:
          type: string
          format: string
    AuthLoginPostBody:
      type: object
      properties:
        username:
          type: string
          format: string
        password:
          type: string
          format: password
    AuthLoginResponse:
      type: object
      properties:
        access_token:
          type: string
          format: string
        refresh_token:
          type: string
          format: string
    AuthRefreshResponse:
      type: object
      properties:
        access_token:
          type: string
          format: string
    AuthInfosResponse:
      type: object
      properties:
        logged_in_as:
          type: string
          format: string

    PjCreatePostBody:
      type: object
      properties:
        race:
          type: string
          format: string
        name:
          type: string
          format: string

    MpSendPostBody:
      type: object
      properties:
        src:
          type: integer
          format: integer
        dst:
          type: array
          items:
            type: integer
        subject:
          type: string
          format: string
        body:
          type: string
          format: string

  securitySchemes:
    refresh_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
    access_token:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - refresh_token: []
  - access_token: []
